
        <!DOCTYPE html>
        <html lang="en">
          <head><script>window.localserviceSettings = {"forwardPreviewErrors":true};</script><script src="/.localservice@runtime.34c588ed.js"></script>
            <meta charset="UTF-8" />
            <title>Error</title>
            <script type="module">
              const error = {"message":"Failed to resolve import \"@openzeppelin/test-environment\" from \"test/XenovaStaking.test.js\". Does the file exist?","stack":"    at TransformPluginContext._formatError (file:///home/project/node_modules/vite/dist/node/chunks/dep-BWSbWtLw.js:49304:41)\n    at TransformPluginContext.error (file:///home/project/node_modules/vite/dist/node/chunks/dep-BWSbWtLw.js:49299:16)\n    at normalizeUrl (file:///home/project/node_modules/vite/dist/node/chunks/dep-BWSbWtLw.js:64090:23)\n    at async eval (file:///home/project/node_modules/vite/dist/node/chunks/dep-BWSbWtLw.js:64222:39)\n    at async TransformPluginContext.transform (file:///home/project/node_modules/vite/dist/node/chunks/dep-BWSbWtLw.js:64149:7)\n    at async PluginContainer.transform (file:///home/project/node_modules/vite/dist/node/chunks/dep-BWSbWtLw.js:49145:18)\n    at async loadAndTransform (file:///home/project/node_modules/vite/dist/node/chunks/dep-BWSbWtLw.js:51978:27)","id":"/home/project/test/XenovaStaking.test.js","frame":"1  |  import { accounts, contract } from '@openzeppelin/test-environment';\n   |                                      ^\n2  |  import { BN, expectEvent, expectRevert, time } from '@openzeppelin/test-helpers';\n3  |  import { expect } from 'chai';","plugin":"vite:import-analysis","pluginCode":"import { accounts, contract } from '@openzeppelin/test-environment';\nimport { BN, expectEvent, expectRevert, time } from '@openzeppelin/test-helpers';\nimport { expect } from 'chai';\n\nconst XenovaStaking = contract.fromArtifact('XenovaStaking');\nconst MockToken = contract.fromArtifact('MockToken');\n\ndescribe('XenovaStaking', function() {\n  const [owner, user1, user2] = accounts;\n  \n  beforeEach(async function() {\n    this.token = await MockToken.new({ from: owner });\n    this.staking = await XenovaStaking.new({ from: owner });\n  });\n\n  describe('Staking tiers', function() {\n    it('should have correct tier configurations', async function() {\n      const tier0 = await this.staking.tiers(0);\n      expect(tier0.duration).to.be.bignumber.equal(new BN('365'));\n      expect(tier0.sharePercent).to.be.bignumber.equal(new BN('6000'));\n\n      const tier1 = await this.staking.tiers(1);\n      expect(tier1.duration).to.be.bignumber.equal(new BN('180'));\n      expect(tier1.sharePercent).to.be.bignumber.equal(new BN('2500'));\n\n      const tier2 = await this.staking.tiers(2);\n      expect(tier2.duration).to.be.bignumber.equal(new BN('90'));\n      expect(tier2.sharePercent).to.be.bignumber.equal(new BN('1500'));\n    });\n  });\n\n  describe('Staking', function() {\n    beforeEach(async function() {\n      await this.token.approve(this.staking.address, new BN('1000000'), { from: user1 });\n    });\n\n    it('should allow staking with valid duration', async function() {\n      const amount = new BN('1000');\n      const duration = new BN('365');\n\n      const tx = await this.staking.stake(amount, duration, { from: user1 });\n      expectEvent(tx, 'Staked', {\n        user: user1,\n        amount: amount,\n        duration: duration\n      });\n    });\n\n    it('should reject invalid stake duration', async function() {\n      const amount = new BN('1000');\n      const duration = new BN('60'); // Too short\n\n      await expectRevert(\n        this.staking.stake(amount, duration, { from: user1 }),\n        'Duration too short'\n      );\n    });\n  });\n\n  describe('Reward distribution', function() {\n    beforeEach(async function() {\n      await this.token.approve(this.staking.address, new BN('1000000'), { from: user1 });\n      await this.staking.stake(new BN('1000'), new BN('365'), { from: user1 });\n    });\n\n    it('should distribute rewards correctly', async function() {\n      const rewardAmount = new BN(web3.utils.toWei('1', 'ether'));\n      \n      const tx = await this.staking.distributeRewards({ \n        from: owner,\n        value: rewardAmount \n      });\n      \n      expectEvent(tx, 'RewardsDistributed', {\n        amount: rewardAmount\n      });\n    });\n  });\n\n  describe('Unstaking', function() {\n    beforeEach(async function() {\n      await this.token.approve(this.staking.address, new BN('1000000'), { from: user1 });\n      await this.staking.stake(new BN('1000'), new BN('365'), { from: user1 });\n    });\n\n    it('should not allow early unstaking', async function() {\n      await expectRevert(\n        this.staking.unstake(0, { from: user1 }),\n        'Stake not ended'\n      );\n    });\n\n    it('should allow unstaking after duration', async function() {\n      await time.increase(time.duration.days(365));\n      const tx = await this.staking.unstake(0, { from: user1 });\n      expectEvent(tx, 'Unstaked', { user: user1 });\n    });\n  });\n});","loc":{"file":"/home/project/test/XenovaStaking.test.js","line":1,"column":37}}
              try {
                const { ErrorOverlay } = await import("/@vite/client")
                document.body.appendChild(new ErrorOverlay(error))
              } catch {
                const h = (tag, text) => {
                  const el = document.createElement(tag)
                  el.textContent = text
                  return el
                }
                document.body.appendChild(h('h1', 'Internal Server Error'))
                document.body.appendChild(h('h2', error.message))
                document.body.appendChild(h('pre', error.stack))
                document.body.appendChild(h('p', '(Error overlay failed to load)'))
              }
            </script>
          </head>
          <body>
          </body>
        </html>
      