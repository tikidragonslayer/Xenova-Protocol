
        <!DOCTYPE html>
        <html lang="en">
          <head><script>window.localserviceSettings = {"forwardPreviewErrors":true};</script><script src="/.localservice@runtime.34c588ed.js"></script>
            <meta charset="UTF-8" />
            <title>Error</title>
            <script type="module">
              const error = {"message":"Failed to resolve import \"@openzeppelin/test-environment\" from \"test/XenovaVault.test.js\". Does the file exist?","stack":"    at TransformPluginContext._formatError (file:///home/project/node_modules/vite/dist/node/chunks/dep-BWSbWtLw.js:49304:41)\n    at TransformPluginContext.error (file:///home/project/node_modules/vite/dist/node/chunks/dep-BWSbWtLw.js:49299:16)\n    at normalizeUrl (file:///home/project/node_modules/vite/dist/node/chunks/dep-BWSbWtLw.js:64090:23)\n    at async eval (file:///home/project/node_modules/vite/dist/node/chunks/dep-BWSbWtLw.js:64222:39)\n    at async TransformPluginContext.transform (file:///home/project/node_modules/vite/dist/node/chunks/dep-BWSbWtLw.js:64149:7)\n    at async PluginContainer.transform (file:///home/project/node_modules/vite/dist/node/chunks/dep-BWSbWtLw.js:49145:18)\n    at async loadAndTransform (file:///home/project/node_modules/vite/dist/node/chunks/dep-BWSbWtLw.js:51978:27)","id":"/home/project/test/XenovaVault.test.js","frame":"1  |  import { accounts, contract } from '@openzeppelin/test-environment';\n   |                                      ^\n2  |  import { BN, expectEvent, expectRevert, time } from '@openzeppelin/test-helpers';\n3  |  import { expect } from 'chai';","plugin":"vite:import-analysis","pluginCode":"import { accounts, contract } from '@openzeppelin/test-environment';\nimport { BN, expectEvent, expectRevert, time } from '@openzeppelin/test-helpers';\nimport { expect } from 'chai';\n\nconst XenovaVault = contract.fromArtifact('XenovaVault');\nconst MockXEN = contract.fromArtifact('MockXEN'); // For testing\n\ndescribe('XenovaVault', function() {\n  const [owner, user1, user2, burnAddress] = accounts;\n  \n  beforeEach(async function() {\n    this.xen = await MockXEN.new({ from: owner });\n    this.vault = await XenovaVault.new(\n      this.xen.address,\n      burnAddress,\n      { from: owner }\n    );\n  });\n\n  describe('Vault locking', function() {\n    it('should lock XEN for 6 years', async function() {\n      const unlockTime = await this.vault.vaultUnlockTime();\n      const sixYears = time.duration.years(6);\n      \n      expect(unlockTime.sub(await time.latest()))\n        .to.be.bignumber.closeTo(sixYears, new BN('86400')); // 1 day tolerance\n    });\n  });\n\n  describe('Claim period', function() {\n    it('should not allow starting claim period before unlock time', async function() {\n      await expectRevert(\n        this.vault.startClaimPeriod({ from: user1 }),\n        'Vault still locked'\n      );\n    });\n\n    it('should start claim period after unlock time', async function() {\n      await time.increase(time.duration.years(6));\n      const tx = await this.vault.startClaimPeriod({ from: user1 });\n      expectEvent(tx, 'ClaimPeriodStarted');\n    });\n  });\n\n  describe('Staking for claim', function() {\n    beforeEach(async function() {\n      await time.increase(time.duration.years(6));\n      await this.vault.startClaimPeriod({ from: owner });\n    });\n\n    it('should allow staking XENOVA', async function() {\n      const amount = new BN('1000');\n      await this.xenova.approve(this.vault.address, amount, { from: user1 });\n      \n      const tx = await this.vault.stakeForClaim(amount, { from: user1 });\n      expectEvent(tx, 'StakeStarted', {\n        staker: user1,\n        amount: amount\n      });\n    });\n\n    it('should not allow staking twice', async function() {\n      const amount = new BN('1000');\n      await this.xenova.approve(this.vault.address, amount, { from: user1 });\n      await this.vault.stakeForClaim(amount, { from: user1 });\n\n      await expectRevert(\n        this.vault.stakeForClaim(amount, { from: user1 }),\n        'Already staked'\n      );\n    });\n  });\n\n  describe('XEN claiming', function() {\n    beforeEach(async function() {\n      await time.increase(time.duration.years(6));\n      await this.vault.startClaimPeriod({ from: owner });\n      \n      const amount = new BN('1000');\n      await this.xenova.approve(this.vault.address, amount, { from: user1 });\n      await this.vault.stakeForClaim(amount, { from: user1 });\n    });\n\n    it('should allow claiming after 90 days', async function() {\n      await time.increase(time.duration.days(90));\n      const tx = await this.vault.claimXenShare({ from: user1 });\n      expectEvent(tx, 'XenClaimed', { staker: user1 });\n    });\n\n    it('should not allow claiming before 90 days', async function() {\n      await time.increase(time.duration.days(89));\n      await expectRevert(\n        this.vault.claimXenShare({ from: user1 }),\n        'Stake duration not met'\n      );\n    });\n  });\n\n  describe('Unclaimed XEN processing', function() {\n    it('should burn unclaimed XEN after claim window', async function() {\n      await time.increase(time.duration.years(6));\n      await this.vault.startClaimPeriod({ from: owner });\n      await time.increase(time.duration.days(100));\n      \n      const tx = await this.vault.processUnclaimedXen({ from: owner });\n      expectEvent(tx, 'UnclaimedXenBurned');\n    });\n  });\n});","loc":{"file":"/home/project/test/XenovaVault.test.js","line":1,"column":37}}
              try {
                const { ErrorOverlay } = await import("/@vite/client")
                document.body.appendChild(new ErrorOverlay(error))
              } catch {
                const h = (tag, text) => {
                  const el = document.createElement(tag)
                  el.textContent = text
                  return el
                }
                document.body.appendChild(h('h1', 'Internal Server Error'))
                document.body.appendChild(h('h2', error.message))
                document.body.appendChild(h('pre', error.stack))
                document.body.appendChild(h('p', '(Error overlay failed to load)'))
              }
            </script>
          </head>
          <body>
          </body>
        </html>
      