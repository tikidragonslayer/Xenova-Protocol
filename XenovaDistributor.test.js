// Add large-scale distribution test
it('should handle distribution to 10,000 stakers', async function() {
    const STAKER_COUNT = 10000;
    const BATCH_SIZE = 500;
    
    // Create test stakers and stakes
    const stakers = [];
    let totalStaked = new BN('0');
    
    for(let i = 0; i < STAKER_COUNT; i++) {
        const stakeAmount = new BN(1000 + Math.floor(Math.random() * 10000));
        await this.xenova.mint(accounts[i % 20], stakeAmount);
        await this.xenova.approve(this.staking.address, stakeAmount, { from: accounts[i % 20] });
        await this.staking.stake(stakeAmount, 365, { from: accounts[i % 20] });
        
        stakers.push({
            address: accounts[i % 20],
            amount: stakeAmount
        });
        totalStaked = totalStaked.add(stakeAmount);
    }

    // Take snapshot
    await this.distributor.takeSnapshot(0);

    // Process in batches
    for(let i = 0; i < stakers.length; i += BATCH_SIZE) {
        const batch = stakers.slice(i, Math.min(i + BATCH_SIZE, stakers.length));
        await this.distributor.processSnapshotBatch(
            0,
            batch.map(s => s.address),
            Math.floor(i / BATCH_SIZE)
        );
    }

    // Finalize with 1000 XEN to distribute
    const xenAmount = new BN('1000000000000000000000'); // 1000 XEN
    await this.distributor.finalizeSnapshot(0, xenAmount);

    // Verify distribution
    const info = await this.distributor.distributions(0);
    expect(info.totalStaked).to.be.bignumber.equal(totalStaked);

    // Random sample of claims
    const sampleSize = 100;
    const samples = Array(sampleSize).fill().map(() => 
        Math.floor(Math.random() * STAKER_COUNT)
    );

    for(const index of samples) {
        const staker = stakers[index];
        const share = staker.amount.mul(xenAmount).div(totalStaked);
        
        const tx = await this.distributor.claimDistribution(0, { from: staker.address });
        const event = tx.logs.find(l => l.event === 'RewardsClaimed');
        
        expect(event.args.amount).to.be.bignumber.closeTo(
            share,
            share.div(new BN('1000000')) // 0.0001% tolerance
        );
    }
});
//# sourceMappingURL=data:application/json;base64,